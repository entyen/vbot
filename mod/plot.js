
const Markup = require('node-vk-bot-api/lib/markup')
const fs = require('fs')
const { keyboard } = require('node-vk-bot-api/lib/markup')
let lang = JSON.parse(fs.readFileSync(`./lang/ru.json`, 'utf-8'))

const plot = {}

plot.plotMenu = (ctx) => {
    if (!ctx.user.plot.own) {
        return ctx.reply(`–£ –≤–∞—Å –µ—Å—Ç—å —É—á–∞—Å—Ç–æ–∫ –Ω–æ –µ–≥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ${resCheck(ctx, 'sand', 5000)} —á—Ç–æ-–±—ã –µ–≥–æ –≤—ã—Ä–æ–≤–Ω—è—Ç—å.`, null, Markup
            .keyboard(
                [
                    Markup.button('–í—ã—Ä–æ–≤–Ω—è—Ç—å —É—á–∞—Å—Ç–æ–∫', 'default', 'plot.align'),
                ],
            )
            .inline()
        )
    }

    let plot = ``
    plot += `üè† –î–æ–º: ${ctx.user.plot.house === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n`
    plot += `üèö –°–∫–ª–∞–¥: ${ctx.user.plot.wh === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n`
    plot += `‚õ™Ô∏è –•—Ä–∞–º: ${ctx.user.plot.temple === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n`
    plot += ctx.user.plot.size === 1 ? `üï≥ –ö–æ–ª–æ–¥–µ—Ü: ${ctx.user.plot.well === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n` : ``
    plot += ctx.user.plot.size === 2 ? `‚õ∞ –†—É–¥–Ω–∏–∫: ${ctx.user.plot.mc === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n` : ``
    plot += ctx.user.plot.size === 2 ? `üå≤ –õ–µ—Å: ${ctx.user.plot.well === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n` : ``

    plot += `\n\n–†–∞–∑–º–µ—Ä —É—á–∞—Å—Ç–∫–∞: ${ctx.user.plot.size === 0 ? '–ú–∞–ª—ã–π' : '–°—Ä–µ–¥–Ω–∏–π'}`

    return ctx.reply(`–£—á–∞—Å—Ç–æ–∫ \n${plot}`, null, ctx.user.plot.size === 0 ? keyboardPlot.Lv0 : ctx.user.plot.size === 1 ? keyboardPlot.Lv1 : ctx.user.plot.size === 2 ? keyboardPlot.Lv2 : false)
}

const keyboardPlot = {}

keyboardPlot.Lv0 = Markup.keyboard([
        [
            Markup.button('–î–æ–º', 'secondary', 'plot.house'),
            Markup.button('–•—Ä–∞–º', 'secondary', 'plot.temple'),
        ],
        [
            Markup.button('–°–∫–ª–∞–¥', 'secondary', 'plot.wh'),
        ],
        [
            Markup.button('–£–ª—É—á—à–∏—Ç—å', 'positive', 'plot.upgrade.Lv1'),
            Markup.button(lang.back, 'negative', 'menu'),
        ],
])

keyboardPlot.Lv1 = Markup.keyboard([
        [
            Markup.button('–î–æ–º', 'secondary', 'plot.house'),
            Markup.button('–•—Ä–∞–º', 'secondary', 'plot.temple'),
            Markup.button('–°–∫–ª–∞–¥', 'secondary', 'plot.wh'),
        ],
        [
            Markup.button('–ö–æ–ª–æ–¥–µ—Ü', 'secondary', 'plot.well'),
        ],
        [
            Markup.button('–£–ª—É—á—à–∏—Ç—å', 'positive', 'plot.upgrade.Lv2'),
            Markup.button(lang.back, 'negative', 'menu'),
        ],
])

keyboardPlot.Lv2 = Markup.keyboard([
        [
            Markup.button('–î–æ–º', 'secondary', 'plot.house'),
            Markup.button('–•—Ä–∞–º', 'secondary', 'plot.temple'),
            Markup.button('–°–∫–ª–∞–¥', 'secondary', 'plot.wh'),
        ],
        [
            Markup.button('–†—É–¥–Ω–∏–∫', 'secondary', 'plot.oreMine'),
            Markup.button('–ö–æ–ª–æ–¥–µ—Ü', 'secondary', 'plot.well'),
            Markup.button('–õ–µ—Å', 'secondary', 'plot.forest'),
        ],
        [
            Markup.button('–£–ª—É—á—à–∏—Ç—å', 'positive', 'plot.upgrade.Lv3'),
            Markup.button(lang.back, 'negative', 'menu'),
        ],
])


plot.plotUpgradeLv1 = (ctx) => {
    if (ctx.user.plot.size >= 1) return ctx.reply('–£—á–∞—Å—Ç–æ–∫ —É–∂–µ –°—Ä–µ–¥–Ω–∏–π')
    if (ctx.user.plot.size === 0) {
        ctx.reply(`–£–ª—É—á—à–∏—Ç—å —É—á–∞—Ç–æ–∫ –¥–æ –°—Ä–µ–¥–Ω–µ–≥–æ\n‚öí –ù–∞ –∞ –µ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n${resCheck(ctx, 'sand', 10000)}`, null, build.plotLv1)
    }
    return 
}

plot.buildWell = async(ctx) => {
    if (ctx.user.plot.well >= 1) return ctx.reply('–£–∂–µ –µ—Å—Ç—å –∫–æ–ª–æ–¥–µ—Ü')
    if (ctx.user.inv.ore < 5000 || ctx.user.inv.rareOre < 2) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        await ctx.user.dec('inv', 3000, 'ore')
        await ctx.user.dec('inv', 2, 'rareOre')
        await ctx.user.set('plot', 1, 'well')
        await ctx.reply('–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–ª–æ–¥–µ—Ü')
    return
}

plot.buildWh = async(ctx) => {
    if (ctx.user.plot.wh >= 1) return ctx.reply('–£–∂–µ –µ—Å—Ç—å —Å–∫–ª–∞–¥')
    console.log(ctx.user.inv.wood)
    if (ctx.user.inv.ore < 1500 || ctx.user.inv.sand < 2000 || ctx.user.inv.wood < 7000) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        await ctx.user.dec('inv', 1500, 'ore')
        await ctx.user.dec('inv', 2000, 'sand')
        await ctx.user.dec('inv', 7000, 'wood')
        await ctx.user.inc('invWeight', 20000)
        await ctx.user.set('plot', 1, 'wh')
        await ctx.reply('–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Å–∫–ª–∞–¥')
    return
}

plot.plotBuildLv1 = async(ctx) => {
    if (ctx.user.plot.size >= 1) return ctx.reply('–í–∞—à —É—á–∞—Å—Ç–æ–∫ —É–∂–µ –°—Ä–µ–¥–Ω–∏–π')
    if (ctx.user.inv.sand < 10000) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        await ctx.user.dec('inv', 10000, 'sand')
        await ctx.user.set('plot', 1, 'size')
        await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –°—Ä–µ–¥–Ω–∏–π', null, keyboardPlot.Lv1 )
    return
}

plot.trowPotion = async(ctx) => {
    if (ctx.user.buffs.energyWell >= ctx.timestamp) { return ctx.reply( '‚ö° –ö–æ–ª–æ–¥–µ—Ü —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω' ) }
    if (ctx.user.items.energyPotion < 1) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ó–µ–ª–∏–π')
        await ctx.user.dec('items', 1, 'energyPotion')
        await ctx.user.set('buffs', (+ctx.timestamp + (4*60*60*1000)), 'energyWell')
        await ctx.reply('‚ö° –ö–æ–ª–æ–¥–µ—Ü –∑–∞—Ä—è–∂–µ–Ω')
    return
}

const resCheck = (ctx, x, y) => {
    return `${ctx.user.inv[x] > y ? '‚úîÔ∏è' : '‚ùå'} ${lang[x]} ${y}`
}

plot.house = (ctx) => {
    if (ctx.user.plot.house === 0) {
        ctx.reply(`üè† –î–æ–º –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞–Ω–∏–º–∞—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n‚öí –ù–∞ –µ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n${lang.wood} \n${lang.sand} `)
    }
    return 
}

plot.temple = (ctx) => {
    if (ctx.user.plot.temple === 0) {
        ctx.reply(`‚õ™Ô∏è –•—Ä–∞–º –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞ –ø–æ–¥–Ω–æ—à–µ–Ω–∏—è –±–æ–≥–∞–º\n‚öí –ù–∞ –µ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n${lang.wood} \n${lang.sand} \n${lang.ore} `)
    }
    return 
}

plot.wh = (ctx) => {
    if (ctx.user.plot.wh === 0) {
        ctx.reply(`üèö –°–∫–ª–∞–¥ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —É–≤–µ–ª–∏—á–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n‚öí –ù–∞ –µ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n${resCheck(ctx, 'ore', 1500)}\nÔ∏é${resCheck(ctx, 'sand', 2000)}\nÔ∏é${resCheck(ctx, 'wood', 7000)}`, null, build.wh)
    } else
    if (ctx.user.plot.wh === 1) {
        ctx.reply(`üèö –°–∫–ª–∞–¥ 1—É—Ä:\n–í–µ—Å –£–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 20000`)
    }
    return 
}

plot.well = (ctx) => {
    if (ctx.user.plot.well === 0) {
        ctx.reply(`üï≥ –ö–æ–ª–æ–¥–µ—Ü –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º\n –ø–æ–ª—É—á–∞—Ç—å –≠—Ñ—Ñ–µ–∫—Ç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≠–Ω–µ—Ä–≥–∏–∏\n‚öí –ù–∞ –∞ –µ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n${resCheck(ctx, 'ore', 3000)}\n${resCheck(ctx, 'rareOre', 2)}`, null, build.well)
    }else 
    if (ctx.user.buffs.energyWell >= ctx.timestamp) {
        ctx.reply(`üï≥ –ö–æ–ª–æ–¥–µ—Ü: \n –ó–∞—Ä—è–∂–µ–Ω –∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≠–Ω–µ—Ä–≥–∏–∏ ‚ö°`)
    } else {
        ctx.reply(`üï≥ –ö–æ–ª–æ–¥–µ—Ü: \n –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ${lang.energyWell} –≤–∞–º –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å –≤ –∫–æ–ª–æ–¥–µ—Ü ${lang.energyPotion}`, null, trowPotionWell)
    }
    return 
}

const build = {}

build.well = Markup.keyboard(
        [
            Markup.button('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å', 'secondary', 'build.well'),
        ],
).inline()

build.wh = Markup.keyboard(
        [
            Markup.button('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å', 'secondary', 'build.wh'),
        ],
).inline()

build.plotLv1 = Markup.keyboard(
        [
            Markup.button('–£–ª—É—á—à–∏—Ç—å —É—á–∞—Å—Ç–æ–∫ –¥–æ –°—Ä–µ–¥–Ω–µ–≥–æ', 'default', 'plot.build.Lv1'),
        ]
).inline()

const trowPotionWell = Markup.keyboard([
        [
            Markup.button('–ë—Ä–æ—Å–∏—Ç—å', 'secondary', 'trow.potion.well'),
        ],
]).inline()

module.exports = { plot }
const { timeout } = require('cron')

const { Job } = require('./scenes/job')

module.exports = async(bot, utils, lang, userdb, bp) => {
    const Markup = require('node-vk-bot-api/lib/markup')

    const usersMap = new Map()
    const LIMIT = 5
    const DIFF = 205
    const TIME = 200
    bot.event('message_event', async (ctx) => {
        const cb = (message) => {
            bot.execute('messages.sendMessageEventAnswer', {
                user_id: ctx.message.user_id,
                peer_id: ctx.message.peer_id,
                event_id: ctx.message.event_id,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: message,
                }),
            })
        }
        ctx.message.createdTimestamp = ctx.timestamp
        if(usersMap.has(ctx.message.peer_id)) {
        const userData = usersMap.get(ctx.message.peer_id);
        const { lastMessage, timer } = userData;
        const difference = ctx.message.createdTimestamp - lastMessage.createdTimestamp;
        let msgCount = userData.msgCount
        cb(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ${difference} ms`)

        if(difference > DIFF) {
            clearTimeout(timer)
            console.log('Cleared Timeout')
            userData.msgCount = 1
            userData.lastMessage = ctx.message
            userData.timer = setTimeout(() => {
                usersMap.delete(ctx.message.peer_id)
                console.log('Removed from map.')
                cb(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ`)
            }, TIME)
            usersMap.set(ctx.message.peer_id, userData)
        }
        else {
            ++msgCount
            if(parseInt(msgCount) === LIMIT) {

               cb(`Warning: Spamming forbidden.`)
               
            } else {
                userData.msgCount = msgCount;
                usersMap.set(ctx.message.peer_id, userData)
            }
        }
        }
        else {
            let fn = setTimeout(async () => {
                usersMap.delete(ctx.message.peer_id)
                // console.log('Removed from map.')
            }, TIME);
            usersMap.set(ctx.message.peer_id, {
                msgCount: 1,
                lastMessage : ctx.message,
                timer : fn
            })
            const job = new Job(bot, ctx)
            await job.workhard()
        }
    })

    await bot.event('message_reply', async (ctx, next) => {
        // console.log(ctx)

        return next()
    })

    bot.on(async (ctx) => {
        if(ctx.user.acclvl < 0) return ctx.reply(`‚ò†Ô∏è –í–∞—à–∞ –¥—É—à–∞ –∑–µ–ø–µ—á–∞—Ç–∞–Ω–Ω–∞, –ø–µ—á–∞—Ç—å —Å–ø–∞–¥–µ—Ç —á–µ—Ä–µ–∑ ${Math.round((ctx.user.buffs.ban-ctx.timestamp)/1000/60/60)} —á–∞—Å–æ–≤`)
        const cmba = ctx.message.text.toLowerCase().split(' ')
        // console.log(toString(cmba[0]) === /^(?:—Ä–µ–π—Ç|—Ä–µ–π—Ç–∏–Ω–≥)$/i, cmba[0])

        const marketSell = async (count, item, eachPrice) => {
            count === 'all' ? count = +ctx.user.inv[item] : count = +ctx.cmd.split('.')[2]
            item = ctx.cmd.split('.')[0]
            if (ctx.user.inv[item] < count || count === 0) {
                await ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${lang[item]}`)
            } else {
                let summ = 0
                eachPrice ? summ = count * eachPrice : summ = count
                summ = Math.round(summ)
                await ctx.bank.inc('inv', count , item)
                await ctx.bank.dec('balance', summ)
                await ctx.user.dec('inv', count , item)
                await ctx.user.inc('balance', summ)
                await ctx.reply(`–í—ã –ø—Ä–æ–¥–∞–ª–∏ ${count} ${lang[item]} –∏ –≤—ã—Ä—É—á–∏–ª–∏ ${summ} ${lang.curr}`)
            }
        }

        if (cmba[0] === 'bup' || cmba[0] === 'alvup') {
            try {
                if (ctx.user.acclvl >= 7 && cmba[0] === 'bup') {
                    const locUser = await userdb.findOne({ uid: cmba[1] })
                    const balup = (locUser.balance + Number(cmba[2]))
                    locUser.balance = balup.toFixed(2)
                    // await locUser.save()
                    await ctx.reply(`@id${locUser.id} user balance up to ${cmba[2] + lang.curr} current balance ${balup + lang.curr}`)
                    await bot.sendMessage(locUser.id, `${lang.balUp} ${cmba[2] + lang.curr} ${lang.currBal} ${balup + lang.curr}`)
                }
                else if (ctx.user.acclvl >= 7 && cmba[0] === 'alvup') {
                    let locUser = await userdb.findOne({ uid: cmba[1] })
                    console.log(locUser.acclvl)
                    if (locUser.acclvl === 7) {
                        return ctx.reply(`–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å —É ${lang.dev}a`)
                    } else {
                        locUser.acclvl = Math.round(cmba[2])
                        await locUser.save()
                        await ctx.reply(`@id${locUser.id} account level up to ${cmba[2] == 0 ? lang.user: cmba[2] == 1 ? lang.vip: cmba[2] == 2 ? lang.plat:
                            cmba[2] == 7 ? lang.dev: cmba[2] == 6 ? lang.adm: cmba[2] == 5 ? lang.moder: cmba[2]}`)
                        await bot.sendMessage(locUser.id, `–¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ –ê–∫–∫–∞—É–Ω—Ç–∞ ${cmba[2] == 0 ? lang.user: cmba[2] == 1 ? lang.vip: cmba[2] == 2 ? lang.plat:
                            cmba[2] == 7 ? lang.dev: cmba[2] == 6 ? lang.adm: cmba[2] == 5 ? lang.moder: cmba[2]}`)
                    }
                } else { ctx.reply(lang.noPerm) }
            } catch (e) {
                ctx.reply(lang.errorinput)
                console.log(e)
            }
        } else
        if (cmba[0] === '—Ä–µ–π—Ç–∏–Ω–≥' || cmba[0] === 'rate' || cmba[0] === '—Ç–æ–ø') {
            user = await userdb.find({})
            let result = `–†–µ–π—Ç–∏–Ω–≥: \n`
            user = user.filter(x => x.acclvl < 3).filter(x => x.balance > 0).sort((a,b) => { return b.balance - a.balance })
            for (i = 0; i < 9; i++) {
                result += `${i === 0 ? 'ü•á': i === 1 ? 'ü•à': i === 2 ? 'ü•â' : 'üèÖ'} @id${user[i].id}(${user[i].f_name}) = ${user[i].balance} ${lang.curr}\n`
            }
            ctx.reply(`${result}`)
            return
        } else
        if (cmba[0] === 'report' || cmba[0] === '—Ä–µ–ø–æ—Ä—Ç') {
            console.log(user.filter(x => x.uid === ctx.user.uid)[0].balance)
                await utils.smChat(2000000005, `üìù –†–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id${ctx.user.id}(${ctx.user.f_name})\nüí¨ ${ctx.message.text.split(' ').join().replace(/,/g, ' ').replace(cmba[0], '')}`)
                .then(() => {
                    return ctx.reply(`üìù –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∏`)
                })
                .catch((err) => { 
                    return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–µ.`)
                })
        } else
        if (cmba[0] === 'use') {
            if (cmba[1] === '–±–∞–Ω–∫–∞' && cmba[2] === '–æ—ç' && ctx.user.items.energyPotion > 0) {
                await ctx.user.dec('items', 1, 'energyPotion')
                await ctx.user.inc('energy', 25)
                await ctx.reply(`–í—ã –∏—Å–ø–æ–ª—å–∑–≤–∞–ª–∏ –±–∞–Ω–∫—É –Ω–∞ –û–≠ —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å ${ctx.user.energy} ‚ö° –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ ${ctx.user.items.energyPotion} –ë–∞–Ω–æ–∫ –û–≠`)
            } else {ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–∞–Ω–∫–∏')}
        } else
        if (cmba[0] === 'send' || cmba[0] === '–ø–µ—Ä–µ–¥–∞—Ç—å') {
            try {
            let locUser = await userdb.findOne({ uid: cmba[1] })
            if (Number(cmba[1]) && Number(cmba[2]) && ctx.user.balance > +cmba[2]) {
                await ctx.user.dec('balance', +cmba[2])
                await locUser.inc('balance', +cmba[2])
                await ctx.reply(`–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ ${+cmba[2]}${lang.curr} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${`@id${locUser.id}(${locUser.f_name})`}`)
                await bot.sendMessage(locUser.id, `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${+cmba[2]}${lang.curr} –æ—Ç ${`@id${ctx.user.id}(${ctx.user.f_name})`}`)
            } else {ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.')}
            } catch (e) {
                console.log(e)
                ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –µ—â–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.')
            }
        } else
        if (cmba[0] === 'buffs' || ctx.cmd === 'buffs') {
                let time = {}
                time.newby = ((ctx.user.buffs.newby - ctx.timestamp)/60/60/1000).toFixed(0)
                time.vip = ((ctx.user.buffs.vip - ctx.timestamp)/60/60/1000).toFixed(0)
                let buffs = `–ë–∞—Ñ—Ñ—ã:\n`
                buffs += `${time.newby <= 0 ? `${lang.newBy}: –ò—Å—Ç–µ–∫` : `${lang.newBy}: ${time.newby} —á–∞—Å–æ–≤`}`
                buffs += `\n\n${time.vip <= 0 ? `` : `${lang.Vip}: ${time.vip} —á–∞—Å–æ–≤`}`
                return await bot.sendMessage(ctx.user.id, `${cmba.join().replace(/,/g, ' ').replace(cmba[0], '')} ${buffs}`)
        } else
        if (cmba[0] === 'admbuff') {
            try{
                let locUser = await userdb.findOne({ uid: cmba[1] })
                if (cmba[1] && cmba[2] && cmba[3] && ctx.user.acclvl >= 7) {
                    const hour = ctx.timestamp + +cmba[3]*60*60*1000
                    if (cmba[2] === '0') {
                    await ctx.reply(`–í—ã –Ω–∞–ª–æ–∂–∏–ª–∏ ${lang.newBy} –Ω–∞ –∏–≥—Ä–æ–∫–∞ @id${locUser.id}(${locUser.f_name}) –Ω–∞ ${+cmba[3]} —á–∞—Å–æ–≤`)
                    await locUser.set('buffs', hour, 'newby')
                    await bot.sendMessage(locUser.id, `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${lang.newBy} –Ω–∞ ${+cmba[3]} —á–∞—Å–∞ \n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —Å–µ–±–µ –º–æ–∂–Ω–æ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`)
                    } else
                    if (cmba[2] === '1') {
                    await ctx.reply(`–í—ã –Ω–∞–ª–æ–∂–∏–ª–∏ ${lang.Vip} –Ω–∞ –∏–≥—Ä–æ–∫–∞ @id${locUser.id}(${locUser.f_name}) –Ω–∞ ${+cmba[3]} —á–∞—Å–æ–≤`)
                    await locUser.set('buffs', hour, 'vip')
                    await bot.sendMessage(locUser.id, `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${lang.Vip} –Ω–∞ ${+cmba[3]} —á–∞—Å–∞ \n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —Å–µ–±–µ –º–æ–∂–Ω–æ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`)
                    } else
                    if (cmba[2] === '-1') {
                    await ctx.reply(`–í—ã –Ω–∞–ª–æ–∂–∏–ª–∏ ${lang.ban} –Ω–∞ –∏–≥—Ä–æ–∫–∞ @id${locUser.id}(${locUser.f_name}) –Ω–∞ ${+cmba[3]} —á–∞—Å–æ–≤`)
                    await locUser.set('buffs', hour, 'ban')
                    await bot.sendMessage(locUser.id, `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${lang.ban} –Ω–∞ ${+cmba[3]} —á–∞—Å–∞ \n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —Å–µ–±–µ –º–æ–∂–Ω–æ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`)
                    } else { ctx.reply('–ë–∞—Ñ—Ñ–∞ —Å —Ç–∞–∫–∏–º [BUFFID] –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')}
                } else {
                    await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É')
                }
            } catch (e) {ctx.reply('–ß—Ç–æ-—Ç–æ –Ω–µ –≤–µ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è')}
        } else
        if (cmba[0] === 'lang' && cmba[1] === 'ru' || cmba[1] === 'en') {
            ctx.user.lang = cmba[1]
            await ctx.user.save()
            await ctx.reply(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${cmba[1]}`)
        }
        if (ctx.cmd === lang.dev || ctx.cmd === lang.adm || ctx.cmd === lang.moder || ctx.cmd === lang.user || ctx.cmd === lang.vip || ctx.cmd === lang.plat) {
            ctx.user.acclvl >= 7 ? ctx.reply(`${lang.userGrpCmd} ${lang.dev} ${lang.rate} ${lang.devCmd}`)
             : ctx.user.acclvl == 6 ? ctx.reply(`${lang.userGrpCmd} ${lang.adm} ${lang.rate}`)
              : ctx.user.acclvl == 5 ? ctx.reply(`${lang.userGrpCmd} ${lang.moder} ${lang.rate}`)
               : ctx.user.acclvl == 2 ? ctx.reply(`${lang.userGrpCmd} ${lang.plat} ${lang.rate}`)
                 : ctx.user.acclvl == 1 ? ctx.reply(`${lang.userGrpCmd} ${lang.vip} ${lang.rate}`)
                  : ctx.user.acclvl == 0 ? ctx.reply(`${lang.userGrpCmd} ${lang.user} ${lang.rate}`)
                   : ctx.reply(lang.noPerm)
            return
        }
        if (!ctx.user) {
            await ctx.reply(`${ctx.mesage.text} ${lang.notcmd}`, null, Markup
                .keyboard([
                    [
                      Markup.button(lang.start, 'primary'),
                    ],
                ])
            )
        } else
        if (!ctx.cmd) { 
            if (ctx.user.acclvl >= 4) {
                return await ctx.reply(lang.navm, null, Markup
                    .keyboard([
                        [
                            Markup.button(lang.crafts, 'primary'),
                            Markup.button(lang.market, 'primary'),
                        ],
                        [
                            Markup.button(ctx.user.f_name, 'secondary'),
                            Markup.button(lang.setting, 'positive'),
                            Markup.button(`${ctx.user.balance} ${lang.curr}`, 'secondary'),
                        ],
                        [
                            Markup.button(`${lang.land}`, 'secondary'),
                        ],
                    ])
                )
            } else
                return await ctx.reply(lang.navm, null, Markup
                    .keyboard([
                        [
                            Markup.button(lang.crafts, 'primary'),
                            Markup.button(lang.market, 'primary'),
                        ],
                        [
                            Markup.button(ctx.user.f_name, 'secondary'),
                            Markup.button(lang.setting, 'positive'),
                            Markup.button(`${ctx.user.balance} ${lang.curr}`, 'secondary'),
                        ],
                        [
                            Markup.button(`${lang.land}`, 'secondary'),
                        ],
                    ])
                )
        }

        switch (ctx.cmd) {
            case ctx.user.f_name:
                let text = ``
                text += `üîé UID: ${ctx.user.uid}\n`
                text += ` üë§ –°—Ç–∞—Ç—É—Å –ê–∫–∫–∞—É–Ω—Ç–∞: ${ctx.user._acclvl}\n`
                text += `üåü –£—Ä–æ–≤–µ–Ω—å: ${ctx.user.level} [${ctx.user.exp}/${100*(ctx.user.level+1)}]\n`
                text += `üß§ –†–∞—Å—Å–∞: ${ctx.user.race === 0 && '–ë–µ–∑ –†–∞—Å—Å—ã'}\n`
                text += `‚ö° –û—á–∫–∏ –≠–Ω–µ—Ä–≥–∏–∏: ${ctx.user.energy} –∏–∑ ${100 * ctx.user.boosters.energyCount}\n`
                text += `‚ö° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≠–Ω–µ—Ä–≥–∏–∏: ${ctx.user.boosters.energyRegen} –≤ 3 –º–∏–Ω—É—Ç—ã\n`
                text += `${ctx.user.alert ? 'üîî' : 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${ctx.user.alert ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n`
                text += `\nüìó –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${ctx.user.regDate}`

                return await ctx.reply(`–ü—Ä–æ—Ñ–∏–ª—å\n ${text}`)
            case `${ctx.user.balance} ${lang.curr}`:
                let inv = ``
                inv += `üí† –û—Ä–≥—É–ª—ã: ${ctx.user.balance}\n`
                inv += `${ctx.user.inv.herbs === 0 ? '' : `${lang.herbs}: ${ctx.user.inv.herbs}\n`}`
                inv += `${ctx.user.inv.ore === 0 ? '' : `${lang.ore}: ${ctx.user.inv.ore}\n`}`
                inv += `${ctx.user.inv.sand === 0 ? '' : `${lang.sand}: ${ctx.user.inv.sand}\n`}`
                inv += `${ctx.user.inv.wood === 0 ? '' : `${lang.wood}: ${ctx.user.inv.wood}\n`}`
                inv += `${ctx.user.inv.fish === 0 ? '' : `${lang.fish}: ${ctx.user.inv.fish}\n`}`
                inv += `${ctx.user.inv.rareHerbs === 0 ? '' : `üçÄ –†–µ–¥–∫–∏–µ –¢—Ä–∞–≤—ã: ${ctx.user.inv.rareHerbs}\n`}`
                inv += `${ctx.user.inv.rareOre === 0 ? '' : `üíé –†–µ–¥–∫–∞—è –†—É–¥–∞: ${ctx.user.inv.rareOre}\n`}`
                inv += `${ctx.user.inv.rareFish === 0 ? '' : `üê° –†–µ–¥–∫–∞—è –†—ã–±–∞: ${ctx.user.inv.rareFish}\n`}`
                inv += `\n${!ctx.user.items.fishingRod ? '' : `üé£ –£–¥–æ—á–∫–∞: –ï—Å—Ç—å\n`}`
                inv += `${ctx.user.items.bait === 0 ? '' : `üêõ –ù–∞–∂–∏–≤–∫–∞: ${ctx.user.items.bait}\n`}`
                inv += `${ctx.user.items.energyPotion === 0 ? '' : `üß™ –ó–µ–ª—å–µ –û–≠: ${ctx.user.items.energyPotion}\n`}`
                inv += `\nüëú –í–µ—Å –ò–Ω–≤–µ–Ω—Ç–∞—Ä—è: ${ctx.user.currWeight}/${ctx.user.invWeight}\n`

                return await ctx.reply(`–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\n ${inv}`)
            case 'menu':
                if (ctx.user.acclvl >= 4) {
                    return await ctx.reply(lang.navm, null, Markup
                        .keyboard([
                            [
                                Markup.button(lang.crafts, 'primary'),
                                Markup.button(lang.market, 'primary'),
                            ],
                            [
                                Markup.button(ctx.user.f_name, 'secondary'),
                                Markup.button(lang.setting, 'positive'),
                                Markup.button(`${ctx.user.balance} ${lang.curr}`, 'secondary'),
                            ],
                            [
                                Markup.button(`${lang.land}`, 'secondary'),
                                // Markup.button(`–ö–Ω–æ–ø–∫–∞`, 'secondary'),
                            ],
                        ])
                    )
                } else
                    return await ctx.reply(lang.navm, null, Markup
                        .keyboard([
                            [
                                Markup.button(lang.crafts, 'primary'),
                                Markup.button(lang.market, 'primary'),
                            ],
                            [
                                Markup.button(ctx.user.f_name, 'secondary'),
                                Markup.button(lang.setting, 'positive'),
                                Markup.button(`${ctx.user.balance} ${lang.curr}`, 'secondary'),
                            ],
                            [
                                Markup.button(`${lang.land}`, 'secondary'),
                            ],
                        ])
                    )
            case lang.setting:
                const alertState = ctx.user.alert ? 'positive' : 'negative'
                const acclvl = ctx.user.acclvl > 5 ? 'negative' : ctx.user.acclvl > 0 ? 'primary' : 'secondary'
                await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', null, Markup
                    .keyboard([
                        [
                            Markup.button(`${ctx.user._acclvl}`, acclvl),
                        ],
                        [
                            Markup.button(lang.alert, alertState),
                            Markup.button(lang.nick, 'default'),
                            Markup.button(lang.back, 'negative', 'menu'),
                        ],
                        [
                            Markup.button('–ë–∞—Ñ—ã', 'default', 'buffs'),
                            Markup.button('–†–µ–øo—Ä—Ç', 'default', 'report'),
                        ],
                    ])
                )
                return
            case 'report':
                return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n —Ä–µ–ø–æ—Ä—Ç \'–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\'')
            case lang.alert:
                if (ctx.user.alert) {
                    ctx.user.alert = false
                    await ctx.user.save()
                    await ctx.reply(`${lang.alert} ${ctx.user.alert ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}`)
                } else {
                    ctx.user.alert = true
                    await ctx.user.save()
                    await ctx.reply(`${lang.alert} ${ctx.user.alert ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}`)
                }
                return
            case lang.crafts:
                return await ctx.reply(`–í—ã–±–∏—Ä–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—É—Ç–∏! –£ –≤–∞—Å ${ctx.user.energy}‚ö°`, null, Job.getKeyboard())
            case 'jobs':
                return await ctx.reply('–ì–¥–µ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å?', null, Markup
                .keyboard(
                    [
                    Markup.button('–¢—Ä–∞–≤—ã', 'default', 'herbjob')
                    ]
                )
                .inline()
                )
            case 'herbjob':
                await ctx.reply('–ü–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –±—É–º –¥–∞–ª—å—à–µ?', null, Markup
                .keyboard(
                    [
                    Markup.button('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', 'default', 'herbjob')
                    ]
                )
                .inline()
                )
                await ctx.user.inc('balance', 1).then(ctx.reply(ctx.user.balance))
                return
            case lang.market:
                ctx.reply(`–ö—É–¥–∞ –≤—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å?`, null, Markup
                    .keyboard([
                        [
                            Markup.button('–ü—Ä–æ–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'primary', 'market.sell.ore'),
                            Markup.button('–ö—É–ø–∏—Ç—å', 'primary', 'market.buy.items'),
                        ],
                        [
                            Markup.button(lang.back, 'negative', 'menu'),
                        ]
                    ])
                )
                return
            case 'market.buy.items':
                ctx.reply(`–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏-–±—ã –∫—É–ø–∏—Ç—å?`, null, Markup
                    .keyboard([
                        [
                            Markup.button('–£–¥–æ—á–∫–∞', 'primary', 'fishingRod'),
                            Markup.button('–ù–∞–∂–∏–≤–∫–∞', 'primary', 'bait'),
                        ],
                        [
                            Markup.button('–ë–∞–Ω–∫–∞ –û–≠', 'primary', 'energyPotion'),
                        ],
                        [
                            Markup.button(lang.back, 'negative', lang.market),
                        ]
                    ])
                )
                return
            case 'energyPotion':
                ctx.reply(`–ó–µ–ª—å–µ –≠–Ω–µ—Ä–≥–∏–∏ 6 500 ${lang.curr} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 25 –û–≠.`, null, Markup
                    .keyboard(
                        [
                            Markup.button('–ö—É–ø–∏—Ç—å', 'default', `${ctx.cmd}.buy`),
                            Markup.button('–û—Ç–º–µ–Ω–∞', 'default', `menu`),
                        ],
                    )
                    .inline()
                )
                return
            case 'energyPotion.buy':
                if (ctx.user.balance < 6500) {return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')}
                await ctx.user.dec('balance', 6500)
                await ctx.bank.inc('balance', 6500)
                await ctx.user.inc('items', 1, 'energyPotion')
                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ üß™\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–µ –∫–æ–º–∞–Ω–¥–æ–π \'use –ë–∞–Ω–∫–∞ –û–≠\'')
                return
            case 'fishingRod':
                ctx.reply(`–£–¥–æ—á–∫–∞ —Å—Ç–æ–∏—Ç 5 000 ${lang.curr}.`, null, Markup
                    .keyboard(
                        [
                            Markup.button('–ö—É–ø–∏—Ç—å', 'default', `${ctx.cmd}.buy`),
                            Markup.button('–û—Ç–º–µ–Ω–∞', 'default', `menu`),
                        ],
                    )
                    .inline()
                )
                return
            case 'fishingRod.buy':
                if (ctx.user.balance < 5000) {return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')}
                if (ctx.user.items.fishingRod) {return ctx.reply('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É–¥–æ—á–∫–∞ üé£')}
                await ctx.user.dec('balance', 5000)
                await ctx.bank.inc('balance', 5000)
                await ctx.user.set('items', true, 'fishingRod')
                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ üé£')
                return
            case 'bait':
                ctx.reply(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 –ù–∞–∂–∏–≤–∫–∞ üêõ = 20 ${lang.curr}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?.`, null, Markup
                    .keyboard(
                        [
                            Markup.button(10, 'default', `${ctx.cmd}.buy.10`),
                            Markup.button(50, 'default', `${ctx.cmd}.buy.50`),
                            Markup.button(100, 'default', `${ctx.cmd}.buy.100`),
                        ],
                    )
                    .inline()
                )
                return
            case 'bait.buy.10':
                if (ctx.user.balance < 20*10) {return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')}
                await ctx.user.dec('balance', 20*10)
                await ctx.bank.inc('balance', 20*10)
                await ctx.user.inc('items', 10, 'bait')
                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 10 üêõ') 
                return
            case 'bait.buy.50':
                if (ctx.user.balance < 20*50) {return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')}
                await ctx.user.dec('balance', 20*50)
                await ctx.bank.inc('balance', 20*50)
                await ctx.user.inc('items', 50, 'bait')
                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 50 üêõ')
                return
            case 'bait.buy.100':
                if (ctx.user.balance < 20*100) {return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')}
                await ctx.user.dec('balance', 20*100)
                await ctx.bank.inc('balance', 20*100)
                await ctx.user.inc('items', 100, 'bait')
                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 100 üêõ')
                return
            case 'market.sell.ore':
                ctx.reply(`–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏-–±—ã –ø—Ä–æ–¥–∞—Ç—å?`, null, Markup
                    .keyboard([
                        [
                            Markup.button(lang.herbs, 'primary', 'herbs'),
                            Markup.button(lang.ore, 'primary', 'ore'),
                        ],
                        [
                            Markup.button(lang.sand, 'primary', 'sand'),
                            Markup.button(lang.wood, 'primary', 'wood'),
                            Markup.button(lang.fish, 'primary', 'fish'),
                        ],
                        [
                            Markup.button(lang.back, 'negative', lang.market),
                        ]
                    ])
                )
                return
            case 'fish':
                ctx.reply(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 ${lang.fish} = ${ctx.bank.dpi.fish} ${lang.curr}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?.`, null, Markup
                    .keyboard(
                        [
                            Markup.button(10, 'default', `${ctx.cmd}.sell.10`),
                            Markup.button(100, 'default', `${ctx.cmd}.sell.100`),
                            Markup.button(500, 'default', `${ctx.cmd}.sell.500`),
                            Markup.button(lang.all, 'default', `${ctx.cmd}.sell.all`),
                        ],
                    )
                    .inline()
                )
                return
            case 'fish.sell.10':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.fish)
                return
            case 'fish.sell.100':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.fish)
                return
            case 'fish.sell.500':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.fish)
                return
            case `fish.sell.all`:
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.fish)
                return
            case 'herbs':
                ctx.reply(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 ${lang.herbs} = ${ctx.bank.dpi.herbs} ${lang.curr}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?.`, null, Markup
                    .keyboard(
                        [
                            Markup.button(100, 'default', `${ctx.cmd}.sell.100`),
                            Markup.button(500, 'default', `${ctx.cmd}.sell.500`),
                            Markup.button(1000, 'default', `${ctx.cmd}.sell.1000`),
                            Markup.button(lang.all, 'default', `${ctx.cmd}.sell.all`),
                        ],
                    )
                    .inline()
                )
                return
            case 'herbs.sell.100':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.herbs)
                return
            case 'herbs.sell.500':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.herbs)
                return
            case 'herbs.sell.1000':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.herbs)
                return
            case `herbs.sell.all`:
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.herbs)
                return
            case 'ore':
                ctx.reply(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 ${lang.ore} = ${ctx.bank.dpi.ore} ${lang.curr}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?.`, null, Markup
                    .keyboard(
                        [
                            Markup.button(100, 'default', `${ctx.cmd}.sell.100`),
                            Markup.button(500, 'default', `${ctx.cmd}.sell.500`),
                            Markup.button(1000, 'default', `${ctx.cmd}.sell.1000`),
                            Markup.button(lang.all, 'default', `${ctx.cmd}.sell.all`),
                        ],
                    )
                    .inline()
                )
                return
            case 'ore.sell.100':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.ore)
                return
            case 'ore.sell.500':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.ore)
                return
            case 'ore.sell.1000':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.ore)
                return
            case `ore.sell.all`:
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.ore)
                return
            case 'sand':
                ctx.reply(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 ${lang.sand} = ${ctx.bank.dpi.sand} ${lang.curr}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?.`, null, Markup
                    .keyboard(
                        [
                            Markup.button(100, 'default', `${ctx.cmd}.sell.100`),
                            Markup.button(500, 'default', `${ctx.cmd}.sell.500`),
                            Markup.button(1000, 'default', `${ctx.cmd}.sell.1000`),
                            Markup.button(lang.all, 'default', `${ctx.cmd}.sell.all`),
                        ],
                    )
                    .inline()
                )
                return
            case 'sand.sell.100':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.sand)
                return
            case 'sand.sell.500':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.sand)
                return
            case 'sand.sell.1000':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.sand)
                return
            case `sand.sell.all`:
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.sand)
                return
            case 'wood':
                ctx.reply(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 ${lang.wood} = ${ctx.bank.dpi.wood} ${lang.curr}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?.`, null, Markup
                    .keyboard(
                        [
                            Markup.button(100, 'default', `${ctx.cmd}.sell.100`),
                            Markup.button(500, 'default', `${ctx.cmd}.sell.500`),
                            Markup.button(1000, 'default', `${ctx.cmd}.sell.1000`),
                            Markup.button(lang.all, 'default', `${ctx.cmd}.sell.all`),
                        ],
                    )
                    .inline()
                )
                return
            case 'wood.sell.100':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.wood)
                return
            case 'wood.sell.500':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.wood)
                return
            case 'wood.sell.1000':
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.wood)
                return
            case `wood.sell.all`:
                marketSell(ctx.cmd.split('.')[2], ctx.cmd.split('.')[0], ctx.bank.dpi.wood)
                return
            case lang.land:
                if (!ctx.user.plot.own) return await ctx.reply(`–£ –≤–∞—Å –µ—Å—Ç—å —É—á–∞—Å—Ç–æ–∫ –Ω–æ –µ–≥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 15000 ${lang.sand} —á—Ç–æ-–±—ã –µ–≥–æ –≤—ã—Ä–æ–≤–Ω—è—Ç—å.`, null, Markup
                    .keyboard(
                        [
                            Markup.button('–í—ã—Ä–æ–≤–Ω—è—Ç—å —É—á–∞—Å—Ç–æ–∫', 'default', 'plot.align'),
                            // Markup.button('–ö—É–ø–∏—Ç—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ', 'default', ``),
                        ],
                    )
                    .inline()
                )

                let plot = ``
                plot += `üè† –î–æ–º: ${ctx.user.plot.house === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n`
                plot += `üèö –°–∫–ª–∞–¥: ${ctx.user.plot.wh === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n`
                plot += `‚õ™Ô∏è –•—Ä–∞–º: ${ctx.user.plot.temple === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n`
                plot += `‚õ∞ –†—É–¥–Ω–∏–∫: ${ctx.user.plot.mc === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n`
                plot += `üï≥ –ö–æ–ª–æ–¥–µ—Ü: ${ctx.user.plot.well === 0 ? '–ù–µ—Ç' : '–ï—Å—Ç—å'}\n`

                plot += `\n\n–†–∞–∑–º–µ—Ä —É—á–∞—Å—Ç–∫–∞: ${ctx.user.plot.size === 0 && '–ú–∞–ª—ã–π'}`

                return await ctx.reply(`–£—á–∞—Å—Ç–æ–∫:\n ${plot}`)
            case 'plot.align':
                return await ctx.reply(`–í—ã—Ä–æ–≤—Ä—è—Ç—å —É—á–∞—Å—Ç–æ–∫ –ø–æ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Å –≤–∞—Å —Å–ø–∏—à–µ—Ç—Å—è \n15000 ${lang.sand}`, null, Markup
                    .keyboard(
                        [
                            Markup.button('–î–∞', 'default', 'plot.align.yes'),
                            Markup.button('–ù–µ—Ç', 'default', 'menu'),
                        ],
                    )
                    .inline()
                    )
            case 'plot.align.yes':
                if (ctx.user.inv.sand < 15000) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
                await ctx.user.dec('inv', 15000, 'sand')
                await ctx.user.set('plot', true, 'own')
                await ctx.reply('–¢–µ–ø–µ—Ä—å –Ω–∞ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å')
                return
            case lang.nick:
                    return await ctx.scene.enter('menu', [1])
            default:
                if (ctx.message.id === 0) return
                // await ctx.reply(`${ctx.message.text} ${lang.notcmd}`)
                // await ctx.scene.enter('menu')

                return
        }

    })
}

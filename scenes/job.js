const Markup = require('node-vk-bot-api/lib/markup')
const Scene = require('node-vk-bot-api/lib/scene')

const fs = require('fs')
let lang = JSON.parse(fs.readFileSync(`./lang/ru.json`, 'utf-8'))

const randCurr = (min, max) => {
    return Math.floor(Math.random() * (max - min) + min)
}

class Job {

    constructor() {
        this.collectCost = {
            herb: {
                energy: 1,
                level: 1,
            },
            ore: {
                energy: 1,
                level: 1,
            },
            sand: {
                energy: 1,
                level: 1,
            },
            forest: {
                energy: 1,
                level: 1,
            },
            fishing: {
                energy: 4,
                level: 4,
            }
        }
    }

    canWork(ctx, cb) {

        if (ctx.user.level < 0) {
            cb.reply('–í–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å')
            return false
        } else if (ctx.user.currWeight > ctx.user.invWeight) {
            cb.reply('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω —Ä–∞–∑–≥—Ä—É–∑–∏—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å')
            return false
        }

        const boringMessage = `–í—ã —É—Å—Ç–∞–ª–∏, —É –≤–∞—Å ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏ ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`
        if (ctx.cmd === lang.field && ctx.user.energy < this.collectCost.herb.energy) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–±–æ—Ä —Ç—Ä–∞–≤
            cb.reply(boringMessage)
            return false
        } else if (ctx.cmd === lang.mine && ctx.user.energy < this.collectCost.ore.energy) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–±–æ—Ä —Ä—É–¥—ã
            cb.reply(boringMessage)
            return false
        } else if (ctx.cmd === lang.beach && ctx.user.energy < this.collectCost.sand.energy) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–±–æ—Ä –ø–µ—Å–∫–∞
            cb.reply(boringMessage)
            return false
        } else if (ctx.cmd === lang.forest && ctx.user.energy < this.collectCost.forest.energy) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–±–æ—Ä –ª–µ—Å–∞
            cb.reply(boringMessage)
            return false
        } else if (ctx.cmd === lang.fishing) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —É—Ä–æ–≤–Ω—è –Ω–∞ —Ä—ã–±–∞–ª–∫—É
            if (ctx.user.level < this.collectCost.fishing.level) {
                cb.reply(`–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —Ä—ã–±–∞–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å ${this.collectCost.fishing.level} —É—Ä–æ–≤–Ω—è.`)
                return false
            } else if (ctx.user.energy < this.collectCost.fishing.energy) {
                cb.reply(boringMessage)
                return false
            }
        }

        return true
    }

    async collectHerbs(ctx, cb, lvlx) {
        await ctx.user.dec('energy', this.collectCost.herb.energy)

        const rare = randCurr(0, 200)
        const earn = Math.round(randCurr(5, 18) * lvlx)

        rare === 27 ? await ctx.user.inc('inv', 1, 'rareHerbs') : null
        await ctx.user.inc('inv', earn, 'herbs')
        await ctx.user.inc('exp', 1)
        await cb.reply(`–í—ã –æ—Ç—ã—Å–∫–∞–ª–∏ –Ω–µ–º–Ω–æ–≥–æ —Ç—Ä–∞–≤ –≤ –ø–æ–ª–µ –∏ —Å–æ–±—Ä–∞–ª–∏ ${earn} üåø ${rare === 27 ? '–∏ 1 üçÄ' : ''} —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
    }

    async collectOre(ctx, cb, lvlx) {
        await ctx.user.dec('energy', this.collectCost.ore.energy)

        const rare = randCurr(0, 400)
        const earn = Math.round(randCurr(3, 24) * lvlx)

        rare === 277 ? await ctx.user.inc('inv', 1, 'rareOre') : null
        await ctx.user.inc('inv', earn, 'ore')
        await ctx.user.inc('exp', 1)
        await cb.reply(`–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –≥–æ—Ä–Ω—É—é —à–∞—Ö—Ç—É –∏ –¥–æ–±—ã–ª–∏ ${earn} ‚õ∞ ${rare === 277 ? '–∏ 1 üíé' : ''} —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
    }

    async collectSand(ctx, cb, lvlx) {
        await ctx.user.dec('energy', this.collectCost.sand.energy)

        const earn = Math.round(randCurr(8, 48) * lvlx)

        await ctx.user.inc('inv', earn, 'sand')
        await ctx.user.inc('exp', 1)
        await cb.reply(`–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ –ø–ª—è–∂ –∏ –æ—Ç–∫–æ–ø–∞–ª–∏ ${earn} üèù —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
    }

    async collectForest(ctx, cb, lvlx) {
        await ctx.user.dec('energy', this.collectCost.forest.energy)

        const earn = Math.round(randCurr(16, 28) * lvlx)

        await ctx.user.inc('inv', earn, 'wood')
        await ctx.user.inc('exp', 1)
        await cb.reply(`–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ª–µ—Å –∏ –Ω–∞—Ä—É–±–∏–ª–∏ ${earn} üå≤ —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
    }

    async fishing(ctx, cb, lvlx) {
        //await ctx.user.dec('energy', this.collectCost.fishing.energy)

        const earn = Math.round(randCurr(0, 0) * lvlx)

        // ctx.user.inv.wood = ctx.user.inv.wood+earn
        // ctx.user.exp = ctx.user.exp+1
        // await ctx.user.save()

        // await cb.reply(`–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ —Ä—ã–±–∞–ª–∫—É –∏ –ø–æ–π–º–∞–ª–∏ ${earn} üêü —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏.`)
        await cb.reply(lang.inDev)
    }

    async workhard(bot, ctx) {
        const cb = {}

        cb.reply = async (message) => {
            bot.execute('messages.sendMessageEventAnswer', {
                user_id: ctx.message.user_id,
                peer_id: ctx.message.peer_id,
                event_id: ctx.message.event_id,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: message,
                }),
            })
        }

        if (!this.canWork(ctx, cb)) {
            return //await ctx.scene.enter('menu')
        }

        const lvlx = ctx.user.level <= 0 ? 1 : 1 + (ctx.user.level * 0.2)
        switch (ctx.cmd) {
            case lang.field:
                return await this.collectHerbs(ctx, cb, lvlx)
            case lang.mine:
                return await this.collectOre(ctx, cb, lvlx)
            case lang.beach:
                return await this.collectSand(ctx, cb, lvlx)
            case lang.forest:
                return await this.collectForest(ctx, cb, lvlx)
            case lang.fishing:
                return await this.fishing(ctx, cb, lvlx)
            default:
                await ctx.scene.leave()
                await ctx.scene.enter('menu')
                return
        }

    }

    static getScene() {
        return new Scene('job',
            async (ctx) => {
                await ctx.reply(`–í—ã–±–∏—Ä–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—É—Ç–∏! –£ –≤–∞—Å ${ctx.user.energy}‚ö°`, null, this.getKeyboard())
                await ctx.scene.next()
            },
            async (ctx) => {
                const lvl = ctx.user.level
                const lvlx = ctx.user.level <= 0 ? 1 : 1 + (ctx.user.level * 0.2)

                if (ctx.user.currWeight > ctx.user.invWeight) {
                    if (ctx.cmd === lang.back) return ctx.scene.enter('menu')
                    return await ctx.reply('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω —Ä–∞–∑–≥—Ä—É–∑–∏—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å')
                }
                if (ctx.cmd === lang.field && lvl >= 0) {
                    // const coldown = Math.ceil((ctx.user.timers.mainWork - ctx.timestamp)/60/1000)
                    // if (coldown >= 1) {
                    //    await ctx.reply(`–í—ã —É—Å—Ç–∞–ª–∏, ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ ${coldown} –º–∏–Ω—É—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`)
                    //    await ctx.scene.leave()
                    //    await ctx.scene.enter('menu', [0])
                    // } else {

                    if (ctx.user.energy <= 0) {
                        await ctx.reply(`–í—ã —É—Å—Ç–∞–ª–∏, —É –≤–∞—Å ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏ ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`)
                    } else {

                        // if (ctx.user.alert) {
                        //   bp.delay(10*60*1000).then( () => ctx.reply('–†–∞–±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞') )
                        // }

                        // ctx.user.timers.mainWork = ctx.timestamp + 10 * 60 * 1000
                        ctx.user.energy = ctx.user.energy - 1

                        let earn = randCurr(5, 18)
                        const rare = randCurr(0, 200)
                        earn = Math.round(earn * lvlx)

                        rare === 27 ? ctx.user.inv.rareHerbs = ctx.user.inv.rareHerbs + 1 : null
                        ctx.user.inv.herbs = ctx.user.inv.herbs + earn
                        ctx.user.exp = ctx.user.exp + 1
                        await ctx.user.save()

                        await ctx.reply(`–í—ã –æ—Ç—ã—Å–∫–∞–ª–∏ –Ω–µ–º–Ω–æ–≥–æ —Ç—Ä–∞–≤ –≤ –ø–æ–ª–µ –∏ —Å–æ–±—Ä–∞–ª–∏ ${earn} üåø ${rare === 27 ? '–∏ 1 üçÄ' : ''} —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
                    }
                } else {
                    await ctx.scene.leave()
                    await ctx.scene.enter('menu')
                }
            },
        )
    }

    static getKeyboard() {
        return Markup.keyboard([
            [
                Markup.button({
                    action: {
                        type: 'callback',
                        label: lang.field,
                        payload: JSON.stringify({cmd: lang.field})
                    }, color: 'primary',
                }),
                Markup.button({
                    action: {
                        type: 'callback',
                        label: lang.mine,
                        payload: JSON.stringify({cmd: lang.mine})
                    }, color: 'primary',
                }),
            ],
            [
                Markup.button({
                    action: {
                        type: 'callback',
                        label: lang.beach,
                        payload: JSON.stringify({cmd: lang.beach})
                    }, color: 'primary',
                }),
                Markup.button({
                    action: {
                        type: 'callback',
                        label: lang.forest,
                        payload: JSON.stringify({cmd: lang.forest})
                    }, color: 'primary',
                }),
            ],
            [
                Markup.button({
                    action: {
                        type: 'callback',
                        label: lang.fishing,
                        payload: JSON.stringify({cmd: lang.fishing})
                    }, color: 'primary',
                }),
                Markup.button(lang.back, 'negative', 'menu'),
            ],
        ])
    }
}

module.exports = { Job }

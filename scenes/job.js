const Markup = require('node-vk-bot-api/lib/markup')
const Scene = require('node-vk-bot-api/lib/scene')

const fs = require('fs')
let lang = JSON.parse(fs.readFileSync(`./lang/ru.json`, 'utf-8'))

const randCurr = (min, max) => {
    return Math.floor(Math.random() * (max - min) + min)
}

const job = new Scene('job',
    async (ctx) => {
        ctx.reply(`–í—ã–±–∏—Ä–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—É—Ç–∏! –£ –≤–∞—Å ${ctx.user.energy}‚ö°`, null, Markup
            .keyboard([
                [
                    // Markup.button(lang[19], 'primary'),
                    // Markup.button(lang[21], 'primary'),
                    Markup.button({ action: { type: 'callback', label: lang[19], payload: JSON.stringify({cmd: lang[19]})},color: 'primary',}),
                    Markup.button({ action: { type: 'callback', label: lang[21], payload: JSON.stringify({cmd: lang[21]})},color: 'primary',}),
                ],
                [
                    // Markup.button(lang[22], 'primary'),
                    // Markup.button(lang[24], 'primary'),
                    Markup.button({ action: { type: 'callback', label: lang[22], payload: JSON.stringify({cmd: lang[22]})},color: 'primary',}),
                    Markup.button({ action: { type: 'callback', label: lang[24], payload: JSON.stringify({cmd: lang[24]})},color: 'primary',}),
                ],
                [
                    // Markup.button(lang[25], 'primary'),
                    Markup.button({ action: { type: 'callback', label: lang[25], payload: JSON.stringify({cmd: lang[25]})},color: 'primary',}),
                    Markup.button(lang[23], 'negative'),
                ]
            ])
        )

        await ctx.scene.next()
    },

    async (ctx) => {
        const lvl = ctx.user.level
        const lvlx = ctx.user.level <= 0 ? 1 : 1 + (ctx.user.level * 0.2)

        if (ctx.user.currWeight > ctx.user.invWeight) {
            if (ctx.cmd === lang[23]) return ctx.scene.enter('menu')
            return await ctx.reply('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω —Ä–∞–∑–≥—Ä—É–∑–∏—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å')
        }
        if (ctx.cmd === lang[19] && lvl >= 0) {
            // const coldown = Math.ceil((ctx.user.timers.mainWork - ctx.timestamp)/60/1000)
            // if (coldown >= 1) {
            //    await ctx.reply(`–í—ã —É—Å—Ç–∞–ª–∏, ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ ${coldown} –º–∏–Ω—É—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`)
            //    await ctx.scene.leave()
            //    await ctx.scene.enter('menu', [0])
            // } else {

            if (ctx.user.energy <= 0) {
                await ctx.reply(`–í—ã —É—Å—Ç–∞–ª–∏, —É –≤–∞—Å ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏ ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`)
            } else {

                // if (ctx.user.alert) {
                //   bp.delay(10*60*1000).then( () => ctx.reply('–†–∞–±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞') )
                // }

                // ctx.user.timers.mainWork = ctx.timestamp + 10 * 60 * 1000
                ctx.user.energy = ctx.user.energy - 1

                let earn = randCurr(5, 18)
                const rare = randCurr(0, 200)
                earn = Math.round(earn * lvlx)

                rare === 27 ? ctx.user.inv.rareHerbs = ctx.user.inv.rareHerbs + 1 : null
                ctx.user.inv.herbs = ctx.user.inv.herbs + earn
                ctx.user.exp = ctx.user.exp + 1
                await ctx.user.save()

                await ctx.reply(`–í—ã –æ—Ç—ã—Å–∫–∞–ª–∏ –Ω–µ–º–Ω–æ–≥–æ —Ç—Ä–∞–≤ –≤ –ø–æ–ª–µ –∏ —Å–æ–±—Ä–∞–ª–∏ ${earn} üåø ${rare === 27 ? '–∏ 1 üçÄ' : ''} —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
            }
        } else if (ctx.cmd === lang[21] && lvl >= 0) {
            if (ctx.user.energy <= 0) {
                await ctx.reply(`–í—ã —É—Å—Ç–∞–ª–∏, —É –≤–∞—Å ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏ ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`)
            } else {

                ctx.user.energy = ctx.user.energy - 1

                let earn = randCurr(3, 24)
                const rare = randCurr(0, 400)
                earn = Math.round(earn * lvlx)

                rare === 277 ? ctx.user.inv.rareOre = ctx.user.inv.rareOre + 1 : null
                ctx.user.inv.ore = ctx.user.inv.ore + earn
                ctx.user.exp = ctx.user.exp + 1
                await ctx.user.save()

                await ctx.reply(`–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –≥–æ—Ä–Ω—É—é —à–∞—Ö—Ç—É –∏ –¥–æ–±—ã–ª–∏ ${earn} ‚õ∞ ${rare === 277 ? '–∏ 1 üíé' : ''} —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
            }
        } else if (ctx.cmd === lang[22] && lvl >= 0) {
            if (ctx.user.energy <= 0) {
                await ctx.reply(`–í—ã —É—Å—Ç–∞–ª–∏, —É –≤–∞—Å ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏ ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`)
            } else {

                ctx.user.energy = ctx.user.energy - 1

                let earn = randCurr(8, 48)
                earn = Math.round(earn * lvlx)

                ctx.user.inv.sand = ctx.user.inv.sand + earn
                ctx.user.exp = ctx.user.exp + 1
                await ctx.user.save()

                await ctx.reply(`–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ –ø–ª—è–∂ –∏ –æ—Ç–∫–æ–ø–∞–ª–∏ ${earn} üèù —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
            }
        } else if (ctx.cmd === lang[24] && lvl >= 0) {
            if (ctx.user.energy <= 0) {
                await ctx.reply(`–í—ã —É—Å—Ç–∞–ª–∏, —É –≤–∞—Å ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏ ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`)
            } else {

                ctx.user.energy = ctx.user.energy - 1

                let earn = randCurr(16, 28)
                earn = Math.round(earn * lvlx)

                ctx.user.inv.wood = ctx.user.inv.wood + earn
                ctx.user.exp = ctx.user.exp + 1
                await ctx.user.save()

                await ctx.reply(`–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ª–µ—Å –∏ –Ω–∞—Ä—É–±–∏–ª–∏ ${earn} üå≤ —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} ‚ö°`)
            }
        } else if (ctx.cmd === lang[25] && lvl >= 0) {
            if (lvl <= 4) return ctx.reply(`–ü—Ä–æ—Ç–∏—Ç–µ –Ω–æ —Ä—ã–±–∞–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å 4 —É—Ä–æ–≤–Ω—è.`)
            if (ctx.user.energy <= 0) {
                await ctx.reply(`–í—ã —É—Å—Ç–∞–ª–∏, —É –≤–∞—Å ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏ ‚è≥ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.`)
            } else {

                // ctx.user.energy = ctx.user.energy - 1

                let earn = randCurr(0, 0)
                earn = Math.round(earn * lvlx)

                // ctx.user.inv.wood = ctx.user.inv.wood+earn
                // ctx.user.exp = ctx.user.exp+1
                // await ctx.user.save()

                await ctx.reply(`–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ —Ä—ã–±–∞–ª–∫—É –∏ –ø–æ–π–º–∞–ª–∏ ${earn} üêü —É –≤–∞—Å –µ—â–µ ${ctx.user.energy} —ç–Ω–µ—Ä–≥–∏–∏.`)
            }
        } else {
            await ctx.scene.leave()
            await ctx.scene.enter('menu')
        }
    },
)

module.exports = {job}
